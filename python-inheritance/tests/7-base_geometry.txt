Tests for BaseGeometry class
============================

Import Class:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Test area() exception:
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

Test for normal functionality:
bg.integer_validator("age", 1)


Test integer_validator for string TypeError:
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

Test integer_validator for value = 0:
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

Test integer_validator for negative numbers:
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

Test integer_validator is empty:
>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test integer_validator for single argument:
>>> bg.integer_validator("age")
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

Test for wrong data type for value:
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
    ...
TypeError: age must be an integer

>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
    ...
TypeError: age must be an integer

>>> bg.integer_validator("age", True)
Traceback (most recent call last):
    ...
TypeError: age must be an integer

>>> bg.integer_validator("age", {3,4})
Traceback (most recent call last):
    ...
TypeError: age must be an integer

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
    ...
TypeError: age must be an integer

